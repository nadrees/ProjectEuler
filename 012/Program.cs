using Lib;
using Lib.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _012
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// 
    /// Let us list the factors of the first seven triangle numbers:
    /// 1: 1
    /// 3: 1,3
    /// 6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// 
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// 
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            // for this problem, we don't need to know the actual divisors, only the number of them
            // if you factor a number in to its prime factors, you can calculate the number of divisors
            // 
            // if n = a^x * b^y * c^z where a, b, c are prime divisors and x, y, z are the number of times those divisors are needed, then
            // num of divisors = (x + 1)(y + 1)(z + 1)

            var triangleNumbers = TriangleNumberGenerator.Generate();
            Console.WriteLine(String.Join(",", triangleNumbers.Take(7)));

            // get list of prime factors
            var primeFactors = 24.PrimeFactorize();
            // count how often(a.k.a. x) each factor(a.k.a. a) appears in the list (a^x)
            var primesCount = from p in primeFactors
                              group p by p into g
                              select new
                              {
                                  prime = g.Key,
                                  count = g.Count()
                              };
            var numFactors = primesCount.Select(g => g.count + 1).Aggregate(1, (sum, next) => sum *= next);

            Console.WriteLine(numFactors);
            Console.ReadKey();
        }
    }
}
